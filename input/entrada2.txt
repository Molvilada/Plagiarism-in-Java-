public class RecursionExampleDirectory2
{

	public static void main(String[] args)
	{	RecursionExampleDirectory2 recursion = new RecursionExampleDirectory2();
		Directory2 directory = new Directory2();
		System.out.println( recursion.getSize(directory) );
	}

	public int getSize(Directory2 dir)
    {	int acum = 0;
        File2[] archivo = dir.getFiles();
        for(int i = 0; i < archivo.length; i++)
            acum += archivo[i].getSize();
        Directory2[] subs2 = dir.getSubs2();
        for(int i = 0; i < subs2.length; i++)
            acum += getSize(subs2[i]);
        return acum;
    }

	public static int fact2(int n2)
	{	int resultado = 0;
		if(n2 == 0)
			resultado = 1;
		else
			resultado = n2 * fact2(n2-1);
		return resultado;
	}

	public static int pow2(int base2, int exp2)
	{	int result3 = 0;
		if(exp2 == 0)
			result3 = 1;
		else
			result3 = base2 * pow2(base2, exp2 - 1);
		return result3;
	}

	public static int fib2(int n3)
	{	int result4 = 0;
		if(n3 == 1 || n3 == 2)
			result4 = 1;
		else
			result4 = fib2(n3-1) + fib2(n3-2);
		return result4;
	}

	public static int minWasted2(int[] items2, int itemNum2, int capLeft2)
	{	int result2 = 0;
		if(itemNum2 >= items2.length)
			result2 = capLeft2;
		else if( capLeft2 == 0)
			result2 = 0;
		else
		{	int minWithout2 = minWasted2(items2, itemNum2 + 1, capLeft2);
			if( capLeft2 <= items2[itemNum2])
			{	int minWith2 = minWasted2(items2, itemNum2 + 1, capLeft2 - items2[itemNum2]);
				result2 = Math.min(minWith2, minWithout2);
			}
			else
				result2 = minWithout2;
		}
		return result2;
	}
}

class Directory2
{	private Directory2[] mySubs2;
	private File2[] myFiles2;

	public Directory2()
	{	int numSubs2 = (int)(Math.random() * 3);
		mySubs2 = new Directory2[numSubs2];
		int numFiles2 = (int)(Math.random() * 10);
		myFiles2 = new File2[numFiles2];

		for(int i = 0; i < myFiles2.length; i++)
			myFiles2[i] = new File2( (int)(Math.random() * 1000 ) );
		for(int i = 0; i < mySubs2.length; i++)
			mySubs2[i] = new Directory2();
	}

	public Directory2[] getSubs2()
	{	return mySubs2;
	}

	public File2[] getFiles()
	{	return myFiles2;
	}
}

class File2
{	private int iMySize2;

	public File2(int size2)
	{	iMySize2 = size2;
	}

	public int getSize()
	{	return iMySize2;
	}
}